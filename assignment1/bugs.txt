crash1.gft
  - Crash at 190-Program tries to call fread based on user input with no checks
    By passing a negative number to fread we can cause the program to crash
    Just set first 4 bytes in crash1.gft to a negative number, didnt need rest of gift card

  - lines 186 - 190 >

    186:fread(&ret_val->num_bytes, 4,1, input_fd);
    187:
		188: // Make something the size of the rest and read it in
		189: ptr = malloc(ret_val->num_bytes);
		190: fread(ptr, ret_val->num_bytes, 1, input_fd);

  - Fix - Add a check for negative values

    186: fread(&ret_val->num_bytes, 4,1, input_fd);
    187: 
		188: // Make something the size of the rest and read it in
    189: if(ret_val->num_bytes < 0){
    190:   printf("%d is not a valid size for Gift Card\n",ret_val->num_bytes);
    191:  exit(1);
    192: }
		193: ptr = malloc(ret_val->num_bytes);
		194: fread(ptr, ret_val->num_bytes, 1, input_fd);


crash2.gft
  - Crash due to animate function and specifically the move cursor and write to cursor functionality.
    There is no check on the location of the pointer, User can move this anywhere in address space, essentially a write what where vulnerability.
    mptr starts in the heap so easiest way to crash program was just overwrite a chunk of the heap,
    I did not debug where in the execution the program actaully crashes, 
    but by overwriting most of the heap with \xff we know program is likely to crash  

  - Details of crash2.gft 
    1) Set first character in message to \xff
    2) Use case 0x01 to store first char in regs - doesnt matter where just reference same index later
    3) Use case 0x03 to move mptr "backwards" (subtract)  - pass \x80 (-128) and \xc8 (-56) 
    4) Use case 0x02 to write \xff to mptr - did roughly 180 times (amount moved back) - use case 0x03 to move mptr forward 1 after write

  - Fix - Added offset value for mptr instead of changing mptr - check value of offset stays between 0 and 32 - cannot move outside of msg

    char offset = 0;
    .
    .
    .
    case 0x01:
        regs[arg1] = *(mptr+offset);
        break;
    case 0x02:
        *(mptr+offset) = regs[arg1];
        break;
    case 0x03:
        //Only move pointer through offset variable and do not allow offset outside of message
        if(offset+(char)arg1<32 && offset+(char)arg1>0){
          offset += (char)arg1;
        }
        break;

hang.gft
   - Infinite loop is possible because animate function allows program to jump backwards with no limitations.
     By passing case 0x09 an arg of -3 the program will continually loop over that one "instruction" 
     Can be done with "\x09\xfd\x00" 

   - Fix - Add a total instruction count to the animate function and set a limit for it
   
     int ic = 0;
     .
     .
     .
     ic+=1;
     if (pc > program+256 || ic > 999) break;

AFL Crashes

- Key to debugging these was adding a print statement in animate that for each instruction would print op,arg1, and arg2.
  This made it very easy to see where problematic instructions were and how to mitigate them.

id:000012,sig:06,src:000060,op:havoc,rep:32
  - was causing "*** stack smashing detected ***: <unknown> terminated"
  - After examining the hex and when the crash occurs, I determined this occured in the animate program due to function 0x01
  - 0x01 places character from current position of mptr in reg[args1], there was no check for arg1, and since reg was a local function variable
    it was located on the stack. By specifying a value larger than 16 for args1 values on the stack could be overwritten

  - Fix - Add a check for arg1 for case 0x01 and 0x02 (Could allow read from stack)
          Checks whether arg1 < 16 and >=0

          case 0x01:
                if(arg1<16 && arg1>=0){
                  regs[arg1] = *(mptr+offset);
                }
                break;
            case 0x02:
                if(arg1<16 && arg1>=0){
                  *(mptr+offset) = regs[arg1];
                }
                break;


id:000030,sig:11,src:000106+000117,op:splice,rep:2
  - Ran giftcardreader with the debug print statement showing op,arg1, and arg2. 
    Only cases actual cases reached were for 0x00 (does nothing), 0x01 and 0x02 (both fixed), and 0x05.
    After examining, case 0x05 realized it has a similar issue described above except instead of setting a value it xors two values.
    Case 0x05 xors reg[arg1] with reg[arg2] and stores result in reg[arg1]. There were no checks on arg1 or arg2.
    Similar to the crash caused by id:000012, this could be used to write to the Stack, if arg1 is set to a nuber larger than 16.
    Even though the attacker can only xor it would still be trivial to write any value they want.
    The current value on the stack can be leaked and then xor calculated. 
    For example, set reg[0] to 0x00 (Case 4), xor reg[0] with reg[stack_offset] (Case 5), read arg[0] (Case 2 then 7),
    xor current value with desired value, set reg[0] with that value (Case 4), xor reg[stack_offset] with reg[0] (Case 5)  

  - Fix - Add a check for arg1 and arg2 to ensure less than 16 and greater than or equal to 0.
          After examining case 0x05 realized that case 0x04 and 0x06 have similar issues, added check for those as well
          
          case 0x04:
                if(arg2<16 && arg2>=0){
                  regs[arg2] = arg1;
                }
                break;
            case 0x05:
                if(arg1<16 && arg1>=0 && arg2<16 && arg2>=0){
                  regs[arg1] ^= regs[arg2];
                  zf = !regs[arg1];
                }
                break;
            case 0x06:
                if(arg1<16 && arg1>=0 && arg2<16 && arg2>=0){
                  regs[arg1] += regs[arg2];
                  zf = !regs[arg1];
                }
                break;
      


