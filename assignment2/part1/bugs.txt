-----------------------------------------------------------------------------------------------------------
XSS Bug 

The first bug is an issue with how the templates are rendered. In two instances, the templates included unsanitized user data.
Django has XSS protection by default when rendering templates but the author turned that off by adding "|safe" telling the
engine the input was safe, which it was not.

FIX - Change {{director|safe}} to {{director}} in all html templates

gift.html:60
item-single.html:62

-----------------------------------------------------------------------------------------------------------

CSRF Bug 

The default cross-site request forgery protections that Django includes had been removed. This removed csrf tokens from 
the forms and allows an attacker to create a weaponized link and send to users. If the user is logged in and clicks on the link
they will unknowingly gift the attacker a card.

The specific approach I took was to use the XSS vulnerability above to make a POST request using Ajax  gifting me a card

FIX - Turn CSRF protections back on

Added 'django.middleware.csrf.CsrfViewMiddleware', to settings.py MIDDLEWARE section - Line 49

Added {% csrf_token %} to templates with <form method=POST ...>
gift.html -line 78
item-single.html - line 79 (Already had {% csrf_token %})
login.html - line 78
register.html - line 72
use-card.html - line 93

After applying fix and running attack get following message and attack fails

Forbidden (CSRF token missing or incorrect.): /gift/3
[20/Nov/2020 01:02:46] "POST /gift/3 HTTP/1.1" 403 2513

-----------------------------------------------------------------------------------------------------------

SQL Injection

Get Salt and Password of User

The site takes user input and passes it to a raw sql query instead of using built-in methods of retrieving objects from DB.
card_file_data (User Controlled Uploaded file) gets passed to parse_card_data which will parse the json and return.
Json should have Array of 'records' and first signature gets used in a raw sql query without sanitization

  Use Gift Card 
  Line 188 - views.py - use_card_view

      signature = json.loads(card_data)['records'][0]['signature']
      card_query = Card.objects.raw('select id from LegacySite_card where data = \'%s\'' % signature)

A simple SQL injection payload can be placed in signature of the uploaded file to dump whatever contents are needed from database

By creating a file with the following content and then uploading we can dump salt and password hash for user test1
{
  "merchant_id": "GiftCardz.com                   ",
  "customer_id": "DuaneGreenes Store 1451         ",
  "total_value": 2000,
  "records": [
    {
      "record_type": "amount_change",
      "amount_added": 2000,
      "signature": "1' UNION SELECT password from LegacySite_user WHERE username= 'test1"
    }
  ]
}

FIX - Use built-in objects.get to query DB for objects with matching signatures. 

In Models.py Signatures should be Unique which is why I chose get instead of filter.
Updated several lines to remove the raw query starting with line 188 - #SQLI indicates line commented out as part of this

        try:
          card_query = card_query = Card.objects.get(data=bytes(signature, encoding='utf-8'))
        except ObjectDoesNotExist:
          card_query = None
        #SQLI -card_query = Card.objects.raw('select id from LegacySite_card where data = \'%s\'' % signature)        
        user_cards = Card.objects.raw('select id, count(*) as count from LegacySite_card where LegacySite_card.user_id = %s' % str(request.user.id))
        #Getting rid of card_query_string - only used on line 222
        #card_query_string = str(card_query) + '\n'        
        #SQLI - card_query_string = ""
        #SQLI - for thing in card_query:
            # print cards as strings
            #SQLI - card_query_string += str(thing) + '\n'
        #SQLI - if len(card_query) is 0:
        if card_query == None:
            # card not known, add it.
            if card_fname is not None:
                card_file_path = f'/tmp/{card_fname}_{request.user.id}_{user_cards[0].count + 1}.gftcrd'
            else:
                card_file_path = f'/tmp/newcard_{request.user.id}_{user_cards[0].count + 1}.gftcrd'

            #Edited to open as 'wb' instead of 'w'
            fp = open(card_file_path, 'wb')
            fp.write(card_data)
            fp.close()
            card = Card(data=card_data, fp=card_file_path, user=request.user, used=True)
        else:
            # just getting rid of card_query_string since it is just one object as string
            context['card_found'] = card_query_string
            #SQLI - context['card_found'] = str(card_query) + '\n'

---------------------------------------------------------------------------------------------------------------------

Command Injection

This bug is actually in the parse_card_data function in extras.py. To exploit it, I used the same use.html POST requests to supply my own
giftcard. The issue is that user input is being passed to a system call through the use of card_path_name.

Line 53 - ret_val = system(f"./{CARD_PARSER} 2 {card_path_name} > tmp_file")

parse_card_data first tests if the contents of card_data are json. If they are not it proceeds to write the contents to a temporary file
and then use giftcardreader binary to convert the contents of card_data to json, which is the step we exploit.

The commands we can run are a somewhat limited because card_path_name must be a valid file path because of line 50
      - with open(card_path_name, 'wb') as card_file:

Anything that causes open() to throw an exception will stop our exploit from running.
This makes it difficult to run commands like "cat /etc/passwd". However, by using a multi-stage exploit described in attacks.txt I was able to 
get a reverse shell.

Fix - We should never be passing user input to a system call, sanitized or not. 

I updated the function to write the contents of card_data a second time to a hardcoded location and use giftcardreader to parse that file.
I chose to write a second copy so that I didnt have to worry about breaking other functionality if the /tmp/<giftcard> location was referenced later (lazy compatibility).

def parse_card_data(card_file_data, card_path_name):
    #print(card_file_data)
    try:
        test_json = json.loads(card_file_data)
        return card_file_data
    except (json.JSONDecodeError, UnicodeDecodeError):
        pass
    with open(card_path_name, 'wb') as card_file:
        #Not addressing the directory traversal - that needs to be done prior to this
        card_file.write(card_file_data)
    # To Fix the Command Injection - just remove the user input from the system call
    # Going to write card_file_data to hardcoded file and read from there
    with open("ci_fix_tmp_file", 'wb') as card_file:
        card_file.write(card_file_data)
    # KG: Are you sure you want the user to control that input?
    ret_val = system(f"./{CARD_PARSER} 2 'ci_fix_tmp_file' > tmp_file")
    #ret_val = system(f"./{CARD_PARSER} 2 {card_path_name} > tmp_file") 
    if ret_val != 0:
        return card_file_data
    with open("tmp_file", 'r') as tmp_file:
        return tmp_file.read()

---------------------------------------------------------------------------------------------------------------------

Several Other bugs were discovered

- In gift_card_view - views.py

    call to write_card_data did not have the correct number of parameters and function did not work
    #write_card_data(card_file_path) does not have correct number of args (added lines 152-156 and update line below)   - 

- In use_card_view

    Line 217
    #Edited to open as 'wb' instead of 'w'
    fp = open(card_file_path, 'wb')

    Also at Line 192
    signature = json.loads(card_data)['records'][0]['signature']
    Does not catch exceptions so return 500 if parse_card_data does not return json with signature in first element of array of records

- import_db.sh seems to have imported data into the wrong columns in LegacySite_user

- In GiftCardSite/settings.py
        Line 27 - DEBUG=true should not be set for production deployment

- Directory traversal issues in some of the file paths
  Example - Line 186 in use_card_view             card_file_path = f'/tmp/{card_fname}_{request.user.id}_parser.gftcrd'

-In extras.py
  The "random" salt is seeded with the same value everytime so salt will always be the same; can generate rainbow table with this info


